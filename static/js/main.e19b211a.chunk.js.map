{"version":3,"sources":["navigation/utils.js","navigation/NestedMenu.js","navigation/Breadcrumbs.js","navigation/Page.js","App.js","serviceWorker.js","pages/Home.js","index.js","routes.js","pages/About.js","pages/About/Team.js","pages/About/Careers.js","pages/Users.js","pages/Pricing.js","pages/Pricing/Basic.js","pages/Pricing/Corporate.js"],"names":["combinePaths","parent","child","replace","pathTo","route","Menu","routes","className","map","index","key","to","path","label","NestedMenu","filter","r","Breadcrumbs","crumb","breadcrumbs","length","Page","PageBody","component","App","basename","process","Boolean","window","location","hostname","match","appRoutes","flattenRoutes","flat","Infinity","setupParents","parentRoute","withParent","buildPaths","parentPath","src","alt","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e19b211a.chunk.js","sourcesContent":["/**\n * Combine paths\n *\n * @param {string} parent\n * @param {string} child\n * @returns {string}\n */\nexport const combinePaths = (parent, child) =>\n  `${parent.replace(/\\/$/, \"\")}/${child.replace(/^\\//, \"\")}`;\n\n/**\n * Recursively build paths for each navigation item\n *\n * @param routes\n * @param {string} parentPath\n * @returns {*}\n */\nexport const buildPaths = (routes, parentPath = \"\") =>\n  routes.map(route => {\n    const path = combinePaths(parentPath, route.path);\n\n    return {\n      ...route,\n      path,\n      ...(route.routes && { routes: buildPaths(route.routes, path) })\n    };\n  });\n\n/**\n * Recursively provide parent reference for each navigation item\n *\n * @param routes\n * @param parentRoute\n * @returns {*}\n */\nexport const setupParents = (routes, parentRoute = null) =>\n  routes.map(route => {\n    const withParent = {\n      ...route,\n      ...(parentRoute && { parent: parentRoute })\n    };\n\n    return {\n      ...withParent,\n      ...(withParent.routes && {\n        routes: setupParents(withParent.routes, withParent)\n      })\n    };\n  });\n\n/**\n * Convert navigation tree into flat array\n *\n * @param routes\n * @returns {any[]}\n */\nexport const flattenRoutes = routes =>\n  routes\n    .map(route => [route.routes ? flattenRoutes(route.routes) : [], route])\n    .flat(Infinity);\n\n/**\n * Combine all the above functions together\n *\n * @param routes\n * @returns {any[]}\n */\nexport const generateAppRoutes = routes => {\n  return flattenRoutes(setupParents(buildPaths(routes)));\n};\n\n/**\n * Provides path from root to the element\n *\n * @param route\n * @returns {any[]}\n */\nexport const pathTo = route => {\n  if (!route.parent) {\n    return [route];\n  }\n\n  return [...pathTo(route.parent), route];\n};\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { pathTo } from \"./utils\";\n\nconst Menu = ({ routes }) => (\n  <nav className=\"menu\">\n    {routes.map((route, index) => (\n      <NavLink key={index} to={route.path}>\n        {route.label}\n      </NavLink>\n    ))}\n  </nav>\n);\n\nconst NestedMenu = ({ route }) => (\n  <>\n    {pathTo(route)\n      .filter(r => r.routes)\n      .map((r, index) => (\n        <Menu key={index} routes={r.routes} />\n      ))}\n  </>\n);\n\nexport default NestedMenu;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { pathTo } from \"./utils\";\n\nconst Breadcrumbs = ({ route }) => (\n  <nav className=\"breadcrumbs\">\n    {pathTo(route).map((crumb, index, breadcrumbs) => (\n      <div key={index} className=\"item\">\n        {index < breadcrumbs.length - 1 && (\n          <NavLink to={crumb.path}>{crumb.label}</NavLink>\n        )}\n        {index === breadcrumbs.length - 1 && crumb.label}\n      </div>\n    ))}\n  </nav>\n);\n\nexport default Breadcrumbs;\n","import React from \"react\";\nimport NestedMenu from \"./NestedMenu\";\nimport Breadcrumbs from \"./Breadcrumbs\";\n\nconst Page = ({ route }) => {\n  const PageBody = route.component;\n  return (\n    <>\n      <NestedMenu route={route} />\n      {route.parent && <Breadcrumbs route={route} />}\n      <PageBody />\n    </>\n  );\n};\n\nexport default Page;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport Page from \"./navigation/Page\";\n\nconst App = ({ routes }) => (\n  // We use <BrowserRouter> in order to support\n  // routing example hosted on GitHub pages.\n  // <BrowserRouter> could be safely replaced with <Router> in\n  // your production application.\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Switch>\n      {routes.map(route => (\n        <Route key={route.path} path={route.path}>\n          <Page route={route} />\n        </Route>\n      ))}\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nconst Home = () => (\n  <div>\n    <img\n      src=\"https://via.placeholder.com/640x480?text=All%20categories\"\n      alt=\"Home categories\"\n    />\n  </div>\n);\n\nexport default Home;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { routes } from \"./routes\";\nimport { generateAppRoutes } from \"./navigation/utils\";\n\nconst appRoutes = generateAppRoutes(routes);\n\nReactDOM.render(<App routes={appRoutes} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import Home from \"./pages/Home\";\nimport About from \"./pages/About\";\nimport Team from \"./pages/About/Team\";\nimport Careers from \"./pages/About/Careers\";\nimport Pricing from \"./pages/Pricing\";\nimport Basic from \"./pages/Pricing/Basic\";\nimport Corporate from \"./pages/Pricing/Corporate\";\nimport Users from \"./pages/Users\";\n\nexport const routes = [\n  {\n    path: \"/\",\n    label: \"Home\",\n    component: Home,\n    routes: [\n      {\n        path: \"/about\",\n        label: \"About\",\n        component: About,\n        routes: [\n          {\n            path: \"/our-team\",\n            label: \"Our Team\",\n            component: Team\n          },\n          {\n            path: \"/careers\",\n            label: \"Careers\",\n            component: Careers\n          }\n        ]\n      },\n      {\n        path: \"/users\",\n        label: \"Users\",\n        component: Users\n      },\n      {\n        path: \"/pricing\",\n        label: \"Pricing\",\n        component: Pricing,\n        routes: [\n          {\n            path: \"/basic\",\n            label: \"Basic\",\n            component: Basic\n          },\n          {\n            path: \"/corporate\",\n            label: \"Corporate\",\n            component: Corporate\n          }\n        ]\n      }\n    ]\n  }\n];\n","import React from \"react\";\n\nconst About = () => (\n  <div>\n    <img src=\"https://via.placeholder.com/640x480?text=About\" alt=\"About\" />\n  </div>\n);\n\nexport default About;\n","import React from \"react\";\n\nconst Team = () => (\n  <div>\n    <img\n      src=\"https://via.placeholder.com/640x480?text=Our Team\"\n      alt=\"Our Team\"\n    />\n  </div>\n);\n\nexport default Team;\n","import React from \"react\";\n\nconst Careers = () => (\n  <div>\n    <img src=\"https://via.placeholder.com/640x480?text=Careers\" alt=\"Careers\" />\n  </div>\n);\n\nexport default Careers;\n","import React from \"react\";\n\nconst Users = () => (\n  <div>\n    <img src=\"https://via.placeholder.com/640x480?text=Users\" alt=\"Users\" />\n  </div>\n);\n\nexport default Users;\n","import React from \"react\";\n\nconst Pricing = () => (\n  <div>\n    <img src=\"https://via.placeholder.com/640x480?text=Pricing\" alt=\"Pricing\" />\n  </div>\n);\n\nexport default Pricing;\n","import React from \"react\";\n\nconst Basic = () => (\n  <div>\n    <img\n      src=\"https://via.placeholder.com/640x480?text=Basic Pricing\"\n      alt=\"Basic Pricing\"\n    />\n  </div>\n);\n\nexport default Basic;\n","import React from \"react\";\n\nconst Corporate = () => (\n  <div>\n    <img\n      src=\"https://via.placeholder.com/640x480?text=Corporate Pricing\"\n      alt=\"Corporate Pricing\"\n    />\n  </div>\n);\n\nexport default Corporate;\n"],"sourceRoot":""}