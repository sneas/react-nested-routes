{"version":3,"sources":["navigation.js","navigation-utils.js","App.js","serviceWorker.js","index.js"],"names":["navigation","path","label","main","src","alt","children","flattenParents","page","parent","flat","Infinity","PageMenu","className","map","child","index","key","to","ParentMenu","reverse","Breadcrumbs","breadCrumb","Page","pages","flattenPages","setupParents","withParent","nestPaths","replace","generateAppPages","App","basename","process","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f491dcc7.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const navigation = [\n  {\n    path: \"/\",\n    label: \"All categories\",\n    main: () => (\n      <div>\n        <img\n          src=\"https://via.placeholder.com/640x480?text=All%20categories\"\n          alt=\"All categories\"\n        />\n      </div>\n    ),\n    children: [\n      {\n        path: \"/electronics\",\n        label: \"Electronics\",\n        main: () => (\n          <div>\n            <img\n              src=\"https://via.placeholder.com/640x480?text=Electronics\"\n              alt=\"Electronics\"\n            />\n          </div>\n        ),\n        children: [\n          {\n            path: \"/accessories\",\n            label: \"Accessories\",\n            main: () => (\n              <div>\n                <img\n                  src=\"https://via.placeholder.com/640x480?text=Accessories\"\n                  alt=\"Accessories\"\n                />\n              </div>\n            )\n          },\n          {\n            path: \"/headphones\",\n            label: \"Headphones\",\n            main: () => (\n              <div>\n                <img\n                  src=\"https://via.placeholder.com/640x480?text=Headphones\"\n                  alt=\"Headphones\"\n                />\n              </div>\n            )\n          }\n        ]\n      },\n      {\n        path: \"/computers\",\n        label: \"Computers\",\n        main: () => (\n          <div>\n            <img\n              src=\"https://via.placeholder.com/640x480?text=Computers\"\n              alt=\"Computers\"\n            />\n          </div>\n        ),\n        children: [\n          {\n            path: \"/laptops\",\n            label: \"Laptops\",\n            main: () => (\n              <div>\n                <img\n                  src=\"https://via.placeholder.com/640x480?text=Laptops\"\n                  alt=\"Laptops\"\n                />\n              </div>\n            )\n          },\n          {\n            path: \"/tablets\",\n            label: \"Tablets\",\n            main: () => (\n              <div>\n                <img\n                  src=\"https://via.placeholder.com/640x480?text=Tablets\"\n                  alt=\"Tablets\"\n                />\n              </div>\n            )\n          }\n        ]\n      },\n      {\n        path: \"/books\",\n        label: \"Books\",\n        main: () => (\n          <div>\n            <img\n              src=\"https://via.placeholder.com/640x480?text=Books\"\n              alt=\"Books\"\n            />\n          </div>\n        )\n      }\n    ]\n  }\n];\n","export const nestPaths = (pages, parent = \"\") =>\n  pages.map(page => {\n    const path = `${parent}${page.path}`.replace(\"//\", \"/\");\n\n    return {\n      ...page,\n      path,\n      ...(page.children && { children: nestPaths(page.children, path) })\n    };\n  });\n\nexport const setupParents = (pages, parent = null) =>\n  pages.map(page => {\n    const withParent = {\n      ...page,\n      ...(parent && { parent })\n    };\n\n    return {\n      ...withParent,\n      ...(withParent.children && {\n        children: setupParents(withParent.children, withParent)\n      })\n    };\n  });\n\nexport const flattenParents = page => {\n  if (!page.parent) {\n    return [];\n  }\n\n  return [page.parent, ...flattenParents(page.parent)].flat(Infinity);\n};\n\nexport const flattenPages = pages =>\n  pages\n    .map(page => [page, page.children ? flattenPages(page.children) : []])\n    .flat(Infinity);\n\nexport const generateAppPages = pages => {\n  return flattenPages(setupParents(nestPaths(pages)));\n};\n","import React, { Fragment } from \"react\";\nimport { BrowserRouter, NavLink, Route, Switch } from \"react-router-dom\";\nimport { navigation } from \"./navigation\";\nimport \"./App.css\";\nimport { flattenParents, generateAppPages } from \"./navigation-utils\";\n\nconst PageMenu = ({ page }) => (\n  <Fragment>\n    <div>{page.label}</div>\n    <nav className=\"menu\">\n      {page.children.map((child, index) => (\n        <NavLink key={index} to={child.path}>\n          {child.label}\n        </NavLink>\n      ))}\n    </nav>\n  </Fragment>\n);\n\nconst ParentMenu = ({ page }) => (\n  <Fragment>\n    {flattenParents(page)\n      .reverse()\n      .map((parent, index) => (\n        <PageMenu key={index} page={parent} />\n      ))}\n  </Fragment>\n);\n\nconst Breadcrumbs = ({ page }) => (\n  <Fragment>\n    <div>Breadcrumbs</div>\n    <nav className=\"breadcrumbs\">\n      {[...flattenParents(page).reverse(), page].map((breadCrumb, index) => (\n        <div key={index} className=\"item\">\n          <NavLink to={breadCrumb.path}>{breadCrumb.label}</NavLink>\n        </div>\n      ))}\n    </nav>\n  </Fragment>\n);\n\nconst Page = ({ page }) => (\n  <Fragment>\n    <ParentMenu page={page} />\n    {page.children && <PageMenu page={page} />}\n\n    {page.parent && (\n      <Fragment>\n        <Breadcrumbs page={page} />\n      </Fragment>\n    )}\n    {page.main()}\n  </Fragment>\n);\n\nconst pages = generateAppPages(navigation);\n\nconst App = () => (\n  // We use <BrowserRouter> in order to support\n  // routing example hosted on GitHub pages.\n  // <BrowserRouter> could be safely replaced with <Router> in\n  // your production application.\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Switch>\n      {pages.reverse().map((page, index) => (\n        <Route\n          key={index}\n          path={page.path}\n          render={() => <Page page={page} />}\n        ></Route>\n      ))}\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}