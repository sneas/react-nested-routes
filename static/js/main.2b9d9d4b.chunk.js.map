{"version":3,"sources":["navigation-utils.js","App.js","serviceWorker.js","navigation.js","index.js"],"names":["combinePaths","parent","child","replace","flattenParents","route","flat","Infinity","Menu","routes","className","map","index","key","to","path","label","NestedMenu","reverse","filter","r","Breadcrumbs","crumb","breadcrumbs","length","Page","content","App","basename","process","render","Boolean","window","location","hostname","match","navigation","flattenNavigation","setupParents","parentRoute","withParent","buildPaths","parentPath","generateAppRoutes","src","alt","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b9d9d4b.chunk.js","sourcesContent":["/**\n * Combine paths\n *\n * @param {string} parent\n * @param {string} child\n * @returns {string}\n */\nexport const combinePaths = (parent, child) =>\n  `${parent.replace(/\\/$/, \"\")}/${child.replace(/^\\//, \"\")}`;\n\n/**\n * Recursively build paths for each navigation item\n *\n * @param navigation\n * @param {string} parentPath\n * @returns {*}\n */\nexport const buildPaths = (navigation, parentPath = \"\") =>\n  navigation.map(route => {\n    const path = combinePaths(parentPath, route.path);\n\n    return {\n      ...route,\n      path,\n      ...(route.routes && { routes: buildPaths(route.routes, path) })\n    };\n  });\n\n/**\n * Recursively provide parent reference for each navigation item\n *\n * @param navigation\n * @param parentRoute\n * @returns {*}\n */\nexport const setupParents = (navigation, parentRoute = null) =>\n  navigation.map(route => {\n    const withParent = {\n      ...route,\n      ...(parentRoute && { parent: parentRoute })\n    };\n\n    return {\n      ...withParent,\n      ...(withParent.routes && {\n        routes: setupParents(withParent.routes, withParent)\n      })\n    };\n  });\n\n/**\n * Convert navigation tree into flat array\n *\n * @param navigation\n * @returns {any[]}\n */\nexport const flattenNavigation = navigation =>\n  navigation\n    .map(route => [route, route.routes ? flattenNavigation(route.routes) : []])\n    .flat(Infinity);\n\n/**\n * Combine all the above functions together\n *\n * @param navigation\n * @returns {any[]}\n */\nexport const generateAppRoutes = navigation => {\n  return flattenNavigation(setupParents(buildPaths(navigation)));\n};\n\n/**\n * Provide list of parents for an individual route\n *\n * @param route\n * @returns {any[]|Array}\n */\nexport const flattenParents = route => {\n  if (!route.parent) {\n    return [];\n  }\n\n  return [route.parent, ...flattenParents(route.parent)].flat(Infinity);\n};\n","import React, { Fragment } from \"react\";\nimport { BrowserRouter, NavLink, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport { flattenParents } from \"./navigation-utils\";\n\nconst Menu = ({ routes }) => (\n  <nav className=\"menu\">\n    {routes.map((route, index) => (\n      <NavLink key={index} to={route.path}>\n        {route.label}\n      </NavLink>\n    ))}\n  </nav>\n);\n\nconst NestedMenu = ({ route }) => (\n  <Fragment>\n    {[...flattenParents(route).reverse(), route]\n      .filter(r => r.routes)\n      .map((r, index) => (\n        <Menu key={index} routes={r.routes} />\n      ))}\n  </Fragment>\n);\n\nconst Breadcrumbs = ({ route }) => (\n  <nav className=\"breadcrumbs\">\n    {[...flattenParents(route).reverse(), route].map(\n      (crumb, index, breadcrumbs) => (\n        <div key={index} className=\"item\">\n          {index < breadcrumbs.length - 1 && (\n            <NavLink to={crumb.path}>{crumb.label}</NavLink>\n          )}\n          {index === breadcrumbs.length - 1 && crumb.label}\n        </div>\n      )\n    )}\n  </nav>\n);\n\nconst Page = ({ route }) => (\n  <Fragment>\n    <NestedMenu route={route} />\n    {route.parent && <Breadcrumbs route={route} />}\n    {route.content()}\n  </Fragment>\n);\n\nconst App = ({ routes }) => (\n  // We use <BrowserRouter> in order to support\n  // routing example hosted on GitHub pages.\n  // <BrowserRouter> could be safely replaced with <Router> in\n  // your production application.\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Switch>\n      {routes.reverse().map((route, index) => (\n        <Route\n          key={index}\n          path={route.path}\n          render={() => <Page route={route} />}\n        ></Route>\n      ))}\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nexport const navigation = [\n  {\n    path: \"/\",\n    label: \"All categories\",\n    content: () => (\n      <div>\n        <img\n          src=\"https://via.placeholder.com/640x480?text=All%20categories\"\n          alt=\"All categories\"\n        />\n      </div>\n    ),\n    routes: [\n      {\n        path: \"/electronics\",\n        label: \"Electronics\",\n        content: () => (\n          <div>\n            <img\n              src=\"https://via.placeholder.com/640x480?text=Electronics\"\n              alt=\"Electronics\"\n            />\n          </div>\n        ),\n        routes: [\n          {\n            path: \"/accessories\",\n            label: \"Accessories\",\n            content: () => (\n              <div>\n                <img\n                  src=\"https://via.placeholder.com/640x480?text=Accessories\"\n                  alt=\"Accessories\"\n                />\n              </div>\n            )\n          },\n          {\n            path: \"/headphones\",\n            label: \"Headphones\",\n            content: () => (\n              <div>\n                <img\n                  src=\"https://via.placeholder.com/640x480?text=Headphones\"\n                  alt=\"Headphones\"\n                />\n              </div>\n            )\n          }\n        ]\n      },\n      {\n        path: \"/computers\",\n        label: \"Computers\",\n        content: () => (\n          <div>\n            <img\n              src=\"https://via.placeholder.com/640x480?text=Computers\"\n              alt=\"Computers\"\n            />\n          </div>\n        ),\n        routes: [\n          {\n            path: \"/laptops\",\n            label: \"Laptops\",\n            content: () => (\n              <div>\n                <img\n                  src=\"https://via.placeholder.com/640x480?text=Laptops\"\n                  alt=\"Laptops\"\n                />\n              </div>\n            )\n          },\n          {\n            path: \"/tablets\",\n            label: \"Tablets\",\n            content: () => (\n              <div>\n                <img\n                  src=\"https://via.placeholder.com/640x480?text=Tablets\"\n                  alt=\"Tablets\"\n                />\n              </div>\n            )\n          }\n        ]\n      },\n      {\n        path: \"/books\",\n        label: \"Books\",\n        content: () => (\n          <div>\n            <img\n              src=\"https://via.placeholder.com/640x480?text=Books\"\n              alt=\"Books\"\n            />\n          </div>\n        )\n      }\n    ]\n  }\n];\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { navigation } from \"./navigation\";\nimport { generateAppRoutes } from \"./navigation-utils\";\n\nconst routes = generateAppRoutes(navigation);\n\nReactDOM.render(<App routes={routes} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}